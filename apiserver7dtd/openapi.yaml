openapi: 3.1.0
info:
  title: 7dtd Ops API
  version: "0.1.0"
  description: 7 Days to Die サーバーを docker compose で操作する同期API
servers:
  - url: https://ops.example.com
security:
  - BearerAuth: []
paths:
  /health:
    get:
      operationId: health
      summary: ヘルスチェック
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
  /server/status:
    get:
      operationId: getServerStatus
      summary: サーバー稼働状態の取得
      responses:
        "200":
          description: 現在の状態
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerStatus"
  /server/start:
    post:
      operationId: startServer
      summary: サーバー起動（同期）
      responses:
        "200":
          description: 実行結果
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
        "409":
          description: 競合
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /server/stop:
    post:
      operationId: stopServer
      summary: サーバー停止（同期）
      responses:
        "200":
          description: 実行結果
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
        "409":
          description: 競合
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /server/restart:
    post:
      operationId: restartServer
      summary: サーバー再起動（同期）
      responses:
        "200":
          description: 実行結果
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestartOperationResult"
        "409":
          description: 競合
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /server/summary:
    get:
      operationId: getServerSummary
      summary: 現在サーバー情報を一括取得
      parameters:
        - name: includePositions
          in: query
          schema: { type: boolean, default: true }
        - name: maskIPs
          in: query
          schema: { type: boolean, default: true }
        - name: limitHostiles
          in: query
          schema: { type: integer, default: 200, minimum: 0, maximum: 2000 }
        - name: timeoutSeconds
          in: query
          schema: { type: integer, minimum: 1, maximum: 15 }
        - name: verbose
          in: query
          schema: { type: boolean, default: false }
      responses:
        "200":
          description: サマリー取得成功（部分成功を含む）
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerSummary"
        "502":
          description: 下位ソース全滅により取得不可
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    ServerStatus:
      type: object
      required: [serviceName, state]
      properties:
        serviceName:
          type: string
          example: "7dtdserver"
        state:
          type: string
          enum: [stopped, starting, running, stopping, failed, unknown]
        pid:
          type: integer
          nullable: true
        uptimeSeconds:
          type: integer
          nullable: true
        lastStartedAt:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
    ExecResult:
      type: object
      required: [command, exitCode, output, startedAt, finishedAt, durationMs]
      properties:
        command: { type: string }
        exitCode: { type: integer }
        output: { type: string }
        startedAt: { type: string, format: date-time }
        finishedAt: { type: string, format: date-time }
        durationMs: { type: integer }
    OperationResult:
      type: object
      required: [status, exec]
      properties:
        status:
          type: string
        note:
          type: string
          nullable: true
        exec:
          $ref: "#/components/schemas/ExecResult"
    RestartOperationResult:
      type: object
      required: [status, exec]
      properties:
        status:
          type: string
          enum: [restarted, restarting]
        exec:
          type: object
          required: [stop, start]
          properties:
            stop: { $ref: "#/components/schemas/ExecResult" }
            start: { $ref: "#/components/schemas/ExecResult" }
    ServerSummary:
      type: object
      required: [data, meta]
      properties:
        data:
          type: object
          properties:
            status:
              $ref: "#/components/schemas/ServerStatus"
            stats:
              type: object
              properties:
                gameTime:
                  type: object
                  properties:
                    days: { type: integer }
                    hours: { type: integer }
                    minutes: { type: integer }
                playersOnline: { type: integer }
                hostiles: { type: integer }
                animals: { type: integer, nullable: true }
            players:
              type: array
              items:
                $ref: "#/components/schemas/SummaryPlayer"
            hostiles:
              type: array
              items:
                $ref: "#/components/schemas/SummaryHostile"
        meta:
          type: object
          properties:
            serverTime: { type: string, format: date-time }
            partial: { type: boolean }
            sources:
              type: array
              items:
                type: object
                properties:
                  name: { type: string }
                  ok: { type: boolean }
                  latencyMs: { type: integer, nullable: true }
                  error: { type: string, nullable: true }
    SummaryPlayer:
      type: object
      properties:
        entityId: { type: integer }
        name: { type: string }
        platformId:
          type: object
          properties:
            platformId: { type: string }
            userId: { type: string }
            combinedString: { type: string }
        crossplatformId:
          type: object
          properties:
            platformId: { type: string }
            userId: { type: string }
            combinedString: { type: string }
        online: { type: boolean }
        ip: { type: string, nullable: true }
        ping: { type: integer, nullable: true }
        position:
          type: object
          nullable: true
          properties:
            x: { type: number }
            y: { type: number }
            z: { type: number }
        level: { type: integer, nullable: true }
        health: { type: number, nullable: true }
        stamina: { type: number, nullable: true }
        score: { type: integer, nullable: true }
        deaths: { type: integer, nullable: true }
        kills:
          type: object
          nullable: true
          properties:
            zombies: { type: integer }
            players: { type: integer }
        banned:
          type: object
          nullable: true
          properties:
            banActive: { type: boolean }
            reason: { type: string, nullable: true }
            until: { type: string, format: date-time, nullable: true }
    SummaryHostile:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        position:
          type: object
          properties:
            x: { type: number }
            y: { type: number }
            z: { type: number }
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object, additionalProperties: true }
