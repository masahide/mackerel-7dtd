// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"time"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for RestartOperationResultStatus.
const (
	Restarted  RestartOperationResultStatus = "restarted"
	Restarting RestartOperationResultStatus = "restarting"
)

// Defines values for ServerStatusState.
const (
	Failed   ServerStatusState = "failed"
	Running  ServerStatusState = "running"
	Starting ServerStatusState = "starting"
	Stopped  ServerStatusState = "stopped"
	Stopping ServerStatusState = "stopping"
	Unknown  ServerStatusState = "unknown"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Code    string                  `json:"code"`
		Details *map[string]interface{} `json:"details,omitempty"`
		Message string                  `json:"message"`
	} `json:"error"`
}

// ExecResult defines model for ExecResult.
type ExecResult struct {
	Command    string    `json:"command"`
	DurationMs int       `json:"durationMs"`
	ExitCode   int       `json:"exitCode"`
	FinishedAt time.Time `json:"finishedAt"`
	Output     string    `json:"output"`
	StartedAt  time.Time `json:"startedAt"`
}

// OperationResult defines model for OperationResult.
type OperationResult struct {
	Exec   ExecResult `json:"exec"`
	Note   *string    `json:"note"`
	Status string     `json:"status"`
}

// RestartOperationResult defines model for RestartOperationResult.
type RestartOperationResult struct {
	Exec struct {
		Start ExecResult `json:"start"`
		Stop  ExecResult `json:"stop"`
	} `json:"exec"`
	Status RestartOperationResultStatus `json:"status"`
}

// RestartOperationResultStatus defines model for RestartOperationResult.Status.
type RestartOperationResultStatus string

// ServerStatus defines model for ServerStatus.
type ServerStatus struct {
	LastStartedAt *time.Time        `json:"lastStartedAt"`
	Notes         *string           `json:"notes,omitempty"`
	Pid           *int              `json:"pid"`
	ServiceName   string            `json:"serviceName"`
	State         ServerStatusState `json:"state"`
	UptimeSeconds *int              `json:"uptimeSeconds"`
}

// ServerStatusState defines model for ServerStatus.State.
type ServerStatusState string

// ServerSummary defines model for ServerSummary.
type ServerSummary struct {
	Data struct {
		Hostiles *[]SummaryHostile `json:"hostiles,omitempty"`
		Players  *[]SummaryPlayer  `json:"players,omitempty"`
		Stats    *struct {
			Animals  *int `json:"animals"`
			GameTime *struct {
				Days    *int `json:"days,omitempty"`
				Hours   *int `json:"hours,omitempty"`
				Minutes *int `json:"minutes,omitempty"`
			} `json:"gameTime,omitempty"`
			Hostiles      *int `json:"hostiles,omitempty"`
			PlayersOnline *int `json:"playersOnline,omitempty"`
		} `json:"stats,omitempty"`
		Status *ServerStatus `json:"status,omitempty"`
	} `json:"data"`
	Meta struct {
		Partial    *bool      `json:"partial,omitempty"`
		ServerTime *time.Time `json:"serverTime,omitempty"`
		Sources    *[]struct {
			Error     *string `json:"error"`
			LatencyMs *int    `json:"latencyMs"`
			Name      *string `json:"name,omitempty"`
			Ok        *bool   `json:"ok,omitempty"`
		} `json:"sources,omitempty"`
	} `json:"meta"`
}

// SummaryHostile defines model for SummaryHostile.
type SummaryHostile struct {
	Id       *int    `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Position *struct {
		X *float32 `json:"x,omitempty"`
		Y *float32 `json:"y,omitempty"`
		Z *float32 `json:"z,omitempty"`
	} `json:"position,omitempty"`
}

// SummaryPlayer defines model for SummaryPlayer.
type SummaryPlayer struct {
	Banned *struct {
		BanActive *bool      `json:"banActive,omitempty"`
		Reason    *string    `json:"reason"`
		Until     *time.Time `json:"until"`
	} `json:"banned"`
	CrossplatformId *struct {
		CombinedString *string `json:"combinedString,omitempty"`
		PlatformId     *string `json:"platformId,omitempty"`
		UserId         *string `json:"userId,omitempty"`
	} `json:"crossplatformId,omitempty"`
	Deaths   *int     `json:"deaths"`
	EntityId *int     `json:"entityId,omitempty"`
	Health   *float32 `json:"health"`
	Ip       *string  `json:"ip"`
	Kills    *struct {
		Players *int `json:"players,omitempty"`
		Zombies *int `json:"zombies,omitempty"`
	} `json:"kills"`
	Level      *int    `json:"level"`
	Name       *string `json:"name,omitempty"`
	Online     *bool   `json:"online,omitempty"`
	Ping       *int    `json:"ping"`
	PlatformId *struct {
		CombinedString *string `json:"combinedString,omitempty"`
		PlatformId     *string `json:"platformId,omitempty"`
		UserId         *string `json:"userId,omitempty"`
	} `json:"platformId,omitempty"`
	Position *struct {
		X *float32 `json:"x,omitempty"`
		Y *float32 `json:"y,omitempty"`
		Z *float32 `json:"z,omitempty"`
	} `json:"position"`
	Score   *int     `json:"score"`
	Stamina *float32 `json:"stamina"`
}

// GetServerSummaryParams defines parameters for GetServerSummary.
type GetServerSummaryParams struct {
	IncludePositions *bool `form:"includePositions,omitempty" json:"includePositions,omitempty"`
	MaskIPs          *bool `form:"maskIPs,omitempty" json:"maskIPs,omitempty"`
	LimitHostiles    *int  `form:"limitHostiles,omitempty" json:"limitHostiles,omitempty"`
	TimeoutSeconds   *int  `form:"timeoutSeconds,omitempty" json:"timeoutSeconds,omitempty"`
	Verbose          *bool `form:"verbose,omitempty" json:"verbose,omitempty"`
}
